
nucleo-l432kc-ad7175.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c64  08003c64  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c6c  08003c6c  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08003c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200002a0  08003f14  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08003f14  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d177  00000000  00000000  00020313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb6  00000000  00000000  0002d48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008be  00000000  00000000  0002fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f752  00000000  00000000  00030766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd75  00000000  00000000  0004feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be035  00000000  00000000  0005dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ddc  00000000  00000000  0011bc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200002a0 	.word	0x200002a0
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003bfc 	.word	0x08003bfc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200002a4 	.word	0x200002a4
 80001c8:	08003bfc 	.word	0x08003bfc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AD7175_ReadRegister>:
*               register structure.
*
* @return Returns 0 for success or negative error code.
******************************************************************************/
int32_t AD7175_ReadRegister(st_reg* pReg)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
    int32_t ret       = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
    uint8_t buffer[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80004d4:	4a34      	ldr	r2, [pc, #208]	; (80005a8 <AD7175_ReadRegister+0xe0>)
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004de:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t i         = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	77fb      	strb	r3, [r7, #31]
    uint8_t crc       = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	75fb      	strb	r3, [r7, #23]

    /* Build the Command word */
    buffer[0] = COMM_REG_WEN | COMM_REG_RD | pReg->addr;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	733b      	strb	r3, [r7, #12]
    
    /* Read data from the device */
    ret = SPI_Read(AD7175_SLAVE_ID, 
                   buffer, 
                   (AD7175_st.useCRC ? pReg->size + 1 : pReg->size) + 1);
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <AD7175_ReadRegister+0xe4>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
    ret = SPI_Read(AD7175_SLAVE_ID, 
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d005      	beq.n	800050e <AD7175_ReadRegister+0x46>
                   (AD7175_st.useCRC ? pReg->size + 1 : pReg->size) + 1);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	b2db      	uxtb	r3, r3
    ret = SPI_Read(AD7175_SLAVE_ID, 
 8000508:	3302      	adds	r3, #2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	e004      	b.n	8000518 <AD7175_ReadRegister+0x50>
                   (AD7175_st.useCRC ? pReg->size + 1 : pReg->size) + 1);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	b2db      	uxtb	r3, r3
    ret = SPI_Read(AD7175_SLAVE_ID, 
 8000514:	3301      	adds	r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f107 010c 	add.w	r1, r7, #12
 800051c:	461a      	mov	r2, r3
 800051e:	2001      	movs	r0, #1
 8000520:	f000 fb14 	bl	8000b4c <SPI_Read>
 8000524:	4603      	mov	r3, r0
 8000526:	61bb      	str	r3, [r7, #24]
    if(ret < 0)
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	2b00      	cmp	r3, #0
 800052c:	da01      	bge.n	8000532 <AD7175_ReadRegister+0x6a>
        return ret;
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	e035      	b.n	800059e <AD7175_ReadRegister+0xd6>

    /* Check the CRC */
    if(AD7175_st.useCRC)
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <AD7175_ReadRegister+0xe4>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d013      	beq.n	8000562 <AD7175_ReadRegister+0x9a>
    {
        crc = AD7175_ComputeCRC(&buffer[1], pReg->size + 1);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3301      	adds	r3, #1
 8000542:	b2da      	uxtb	r2, r3
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	3301      	adds	r3, #1
 800054a:	4611      	mov	r1, r2
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f8b3 	bl	80006b8 <AD7175_ComputeCRC>
 8000552:	4603      	mov	r3, r0
 8000554:	75fb      	strb	r3, [r7, #23]
        if(crc != AD7175_CRC_CHECK_CODE)
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	2bf3      	cmp	r3, #243	; 0xf3
 800055a:	d002      	beq.n	8000562 <AD7175_ReadRegister+0x9a>
            return -1;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e01d      	b.n	800059e <AD7175_ReadRegister+0xd6>
    }

    /* Build the result */
    pReg->value = 0;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
    for(i = 1; i < pReg->size + 1; i++)
 8000568:	2301      	movs	r3, #1
 800056a:	77fb      	strb	r3, [r7, #31]
 800056c:	e011      	b.n	8000592 <AD7175_ReadRegister+0xca>
    {
        pReg->value <<= 8;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	021a      	lsls	r2, r3, #8
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
        pReg->value += buffer[i];
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	7ffa      	ldrb	r2, [r7, #31]
 800057e:	3220      	adds	r2, #32
 8000580:	443a      	add	r2, r7
 8000582:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000586:	441a      	add	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
    for(i = 1; i < pReg->size + 1; i++)
 800058c:	7ffb      	ldrb	r3, [r7, #31]
 800058e:	3301      	adds	r3, #1
 8000590:	77fb      	strb	r3, [r7, #31]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	7ffb      	ldrb	r3, [r7, #31]
 8000598:	429a      	cmp	r2, r3
 800059a:	dae8      	bge.n	800056e <AD7175_ReadRegister+0xa6>
    }

    return ret;
 800059c:	69bb      	ldr	r3, [r7, #24]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08003c14 	.word	0x08003c14
 80005ac:	200002bc 	.word	0x200002bc

080005b0 <AD7175_WriteRegister>:
* @param reg - Register structure holding info about the register to be written
*
* @return Returns 0 for success or negative error code.
******************************************************************************/
int32_t AD7175_WriteRegister(st_reg reg)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int32_t ret      = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
    int32_t regValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t wrBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80005c4:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <AD7175_WriteRegister+0xd4>)
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t i        = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t crc      = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	76fb      	strb	r3, [r7, #27]
    
    /* Build the Command word */
    wrBuf[0] = COMM_REG_WEN | COMM_REG_WR | reg.addr;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	743b      	strb	r3, [r7, #16]
    
    /* Fill the write buffer */
    regValue = reg.value;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
    for(i = 0; i < reg.size; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80005ec:	e011      	b.n	8000612 <AD7175_WriteRegister+0x62>
    {
        wrBuf[reg.size - i] = regValue & 0xFF;
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	3328      	adds	r3, #40	; 0x28
 80005fc:	443b      	add	r3, r7
 80005fe:	f803 2c18 	strb.w	r2, [r3, #-24]
        regValue >>= 8;
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	121b      	asrs	r3, r3, #8
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
    for(i = 0; i < reg.size; i++)
 8000608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800060c:	3301      	adds	r3, #1
 800060e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000612:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbe8      	blt.n	80005ee <AD7175_WriteRegister+0x3e>
    }

    /* Compute the CRC */
    if(AD7175_st.useCRC)
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <AD7175_WriteRegister+0xd8>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d014      	beq.n	800064e <AD7175_WriteRegister+0x9e>
    {
        crc = AD7175_ComputeCRC(wrBuf, reg.size+1);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	3301      	adds	r3, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f840 	bl	80006b8 <AD7175_ComputeCRC>
 8000638:	4603      	mov	r3, r0
 800063a:	76fb      	strb	r3, [r7, #27]
        wrBuf[reg.size + 1] = ~crc;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	7efa      	ldrb	r2, [r7, #27]
 8000642:	43d2      	mvns	r2, r2
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	3328      	adds	r3, #40	; 0x28
 8000648:	443b      	add	r3, r7
 800064a:	f803 2c18 	strb.w	r2, [r3, #-24]
    }

    /* Write data to the device */
    ret = SPI_Write(AD7175_SLAVE_ID,
                    wrBuf,
                    AD7175_st.useCRC ? reg.size + 2 : reg.size + 1);
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <AD7175_WriteRegister+0xd8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
    ret = SPI_Write(AD7175_SLAVE_ID,
 8000652:	2b00      	cmp	r3, #0
 8000654:	d004      	beq.n	8000660 <AD7175_WriteRegister+0xb0>
                    AD7175_st.useCRC ? reg.size + 2 : reg.size + 1);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	b2db      	uxtb	r3, r3
    ret = SPI_Write(AD7175_SLAVE_ID,
 800065a:	3302      	adds	r3, #2
 800065c:	b2db      	uxtb	r3, r3
 800065e:	e003      	b.n	8000668 <AD7175_WriteRegister+0xb8>
                    AD7175_st.useCRC ? reg.size + 2 : reg.size + 1);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	b2db      	uxtb	r3, r3
    ret = SPI_Write(AD7175_SLAVE_ID,
 8000664:	3301      	adds	r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f107 0110 	add.w	r1, r7, #16
 800066c:	461a      	mov	r2, r3
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fa44 	bl	8000afc <SPI_Write>
 8000674:	4603      	mov	r3, r0
 8000676:	61fb      	str	r3, [r7, #28]
    
    return ret;
 8000678:	69fb      	ldr	r3, [r7, #28]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	08003c14 	.word	0x08003c14
 8000688:	200002bc 	.word	0x200002bc

0800068c <AD7175_ReadData>:
* @param pData - Pointer to store the read data.
*
* @return Returns 0 for success or negative error code.
******************************************************************************/
int32_t AD7175_ReadData(int32_t* pData)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    int32_t ret;

    /* Read the value of the Status Register */
    ret = AD7175_ReadRegister(&AD7175_regs[Data_Register]);
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <AD7175_ReadData+0x24>)
 8000696:	f7ff ff17 	bl	80004c8 <AD7175_ReadRegister>
 800069a:	60f8      	str	r0, [r7, #12]

    /* Get the read result */
    *pData = AD7175_regs[Data_Register].value;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <AD7175_ReadData+0x28>)
 800069e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]

    return ret;
 80006a4:	68fb      	ldr	r3, [r7, #12]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000024 	.word	0x20000024
 80006b4:	20000000 	.word	0x20000000

080006b8 <AD7175_ComputeCRC>:
* @param bufSize - Data buffer size in bytes
*
* @return Returns the computed CRC
******************************************************************************/
uint8_t AD7175_ComputeCRC(uint8_t* pBuf, uint8_t bufSize)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
    uint8_t crc = 0xFF;
 80006c8:	23ff      	movs	r3, #255	; 0xff
 80006ca:	73bb      	strb	r3, [r7, #14]

	while(bufSize--)
 80006cc:	e01e      	b.n	800070c <AD7175_ComputeCRC+0x54>
	{
		crc ^= *pBuf++;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	781a      	ldrb	r2, [r3, #0]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	4053      	eors	r3, r2
 80006da:	73bb      	strb	r3, [r7, #14]
		for(i = 0; i < 8; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	e011      	b.n	8000706 <AD7175_ComputeCRC+0x4e>
		{
			if(crc & 0x80)
 80006e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	da07      	bge.n	80006fa <AD7175_ComputeCRC+0x42>
				crc = (crc << 1) ^ AD7175_CRC_POLYNOMIAL;
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	f083 0307 	eor.w	r3, r3, #7
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	e002      	b.n	8000700 <AD7175_ComputeCRC+0x48>
            else
				crc <<= 1;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
		for(i = 0; i < 8; i++)
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	3301      	adds	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b07      	cmp	r3, #7
 800070a:	d9ea      	bls.n	80006e2 <AD7175_ComputeCRC+0x2a>
	while(bufSize--)
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	70fa      	strb	r2, [r7, #3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1db      	bne.n	80006ce <AD7175_ComputeCRC+0x16>
		}
	}
	return crc;
 8000716:	7bbb      	ldrb	r3, [r7, #14]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <AD7175_Setup>:
* @brief Initializes the AD7175 
*
* @return Returns 0 for success or negative error code.
******************************************************************************/
int32_t AD7175_Setup(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
    int32_t ret;

    /* Initialize the SPI communication */
    SPI_Init(0, 8000000, 1, 0);
 800072a:	2300      	movs	r3, #0
 800072c:	2201      	movs	r2, #1
 800072e:	49a1      	ldr	r1, [pc, #644]	; (80009b4 <AD7175_Setup+0x290>)
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f9cf 	bl	8000ad4 <SPI_Init>
    
    /* Initialize ADC mode register */
    ret = AD7175_WriteRegister(AD7175_regs[ADC_Mode_Register]);
 8000736:	4ba0      	ldr	r3, [pc, #640]	; (80009b8 <AD7175_Setup+0x294>)
 8000738:	330c      	adds	r3, #12
 800073a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800073e:	f7ff ff37 	bl	80005b0 <AD7175_WriteRegister>
 8000742:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	da01      	bge.n	800074e <AD7175_Setup+0x2a>
        return ret;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	e1bb      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    
    /* Initialize Interface mode register */
    ret = AD7175_WriteRegister(AD7175_regs[Interface_Mode_Register]);
 800074e:	4b9a      	ldr	r3, [pc, #616]	; (80009b8 <AD7175_Setup+0x294>)
 8000750:	3318      	adds	r3, #24
 8000752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000756:	f7ff ff2b 	bl	80005b0 <AD7175_WriteRegister>
 800075a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	da01      	bge.n	8000766 <AD7175_Setup+0x42>
        return ret;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	e1af      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    AD7175_st.useCRC = INTF_MODE_REG_CRC_STAT(AD7175_regs[Interface_Mode_Register].value);
 8000766:	4b94      	ldr	r3, [pc, #592]	; (80009b8 <AD7175_Setup+0x294>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	4b90      	ldr	r3, [pc, #576]	; (80009bc <AD7175_Setup+0x298>)
 800077c:	701a      	strb	r2, [r3, #0]
    
    /* Initialize GPIO configuration register */
    ret = AD7175_WriteRegister(AD7175_regs[IOCon_Register]);
 800077e:	4b8e      	ldr	r3, [pc, #568]	; (80009b8 <AD7175_Setup+0x294>)
 8000780:	3330      	adds	r3, #48	; 0x30
 8000782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000786:	f7ff ff13 	bl	80005b0 <AD7175_WriteRegister>
 800078a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <AD7175_Setup+0x72>
        return ret;   
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	e197      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    
    /* Initialize Channel Map registers */
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_1]);
 8000796:	4b88      	ldr	r3, [pc, #544]	; (80009b8 <AD7175_Setup+0x294>)
 8000798:	3348      	adds	r3, #72	; 0x48
 800079a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800079e:	f7ff ff07 	bl	80005b0 <AD7175_WriteRegister>
 80007a2:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da01      	bge.n	80007ae <AD7175_Setup+0x8a>
        return ret;   
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	e18b      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_2]);
 80007ae:	4b82      	ldr	r3, [pc, #520]	; (80009b8 <AD7175_Setup+0x294>)
 80007b0:	3354      	adds	r3, #84	; 0x54
 80007b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007b6:	f7ff fefb 	bl	80005b0 <AD7175_WriteRegister>
 80007ba:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da01      	bge.n	80007c6 <AD7175_Setup+0xa2>
        return ret;   
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	e17f      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_3]);
 80007c6:	4b7c      	ldr	r3, [pc, #496]	; (80009b8 <AD7175_Setup+0x294>)
 80007c8:	3360      	adds	r3, #96	; 0x60
 80007ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007ce:	f7ff feef 	bl	80005b0 <AD7175_WriteRegister>
 80007d2:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <AD7175_Setup+0xba>
        return ret;    
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	e173      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_4]);
 80007de:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <AD7175_Setup+0x294>)
 80007e0:	336c      	adds	r3, #108	; 0x6c
 80007e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007e6:	f7ff fee3 	bl	80005b0 <AD7175_WriteRegister>
 80007ea:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da01      	bge.n	80007f6 <AD7175_Setup+0xd2>
        return ret;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	e167      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_5]);
 80007f6:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <AD7175_Setup+0x294>)
 80007f8:	3378      	adds	r3, #120	; 0x78
 80007fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007fe:	f7ff fed7 	bl	80005b0 <AD7175_WriteRegister>
 8000802:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da01      	bge.n	800080e <AD7175_Setup+0xea>
        return ret;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	e15b      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_6]);
 800080e:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <AD7175_Setup+0x294>)
 8000810:	3384      	adds	r3, #132	; 0x84
 8000812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000816:	f7ff fecb 	bl	80005b0 <AD7175_WriteRegister>
 800081a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <AD7175_Setup+0x102>
        return ret;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	e14f      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_7]);
 8000826:	4b64      	ldr	r3, [pc, #400]	; (80009b8 <AD7175_Setup+0x294>)
 8000828:	3390      	adds	r3, #144	; 0x90
 800082a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800082e:	f7ff febf 	bl	80005b0 <AD7175_WriteRegister>
 8000832:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da01      	bge.n	800083e <AD7175_Setup+0x11a>
        return ret;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	e143      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_8]);
 800083e:	4b5e      	ldr	r3, [pc, #376]	; (80009b8 <AD7175_Setup+0x294>)
 8000840:	339c      	adds	r3, #156	; 0x9c
 8000842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000846:	f7ff feb3 	bl	80005b0 <AD7175_WriteRegister>
 800084a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	da01      	bge.n	8000856 <AD7175_Setup+0x132>
        return ret;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	e137      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_9]);
 8000856:	4b58      	ldr	r3, [pc, #352]	; (80009b8 <AD7175_Setup+0x294>)
 8000858:	33a8      	adds	r3, #168	; 0xa8
 800085a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800085e:	f7ff fea7 	bl	80005b0 <AD7175_WriteRegister>
 8000862:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da01      	bge.n	800086e <AD7175_Setup+0x14a>
        return ret;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	e12b      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_10]);
 800086e:	4b52      	ldr	r3, [pc, #328]	; (80009b8 <AD7175_Setup+0x294>)
 8000870:	33b4      	adds	r3, #180	; 0xb4
 8000872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000876:	f7ff fe9b 	bl	80005b0 <AD7175_WriteRegister>
 800087a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <AD7175_Setup+0x162>
        return ret;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	e11f      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_11]);
 8000886:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <AD7175_Setup+0x294>)
 8000888:	33c0      	adds	r3, #192	; 0xc0
 800088a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800088e:	f7ff fe8f 	bl	80005b0 <AD7175_WriteRegister>
 8000892:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	da01      	bge.n	800089e <AD7175_Setup+0x17a>
        return ret;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	e113      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_12]);
 800089e:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <AD7175_Setup+0x294>)
 80008a0:	33cc      	adds	r3, #204	; 0xcc
 80008a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008a6:	f7ff fe83 	bl	80005b0 <AD7175_WriteRegister>
 80008aa:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da01      	bge.n	80008b6 <AD7175_Setup+0x192>
        return ret;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	e107      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_13]);
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <AD7175_Setup+0x294>)
 80008b8:	33d8      	adds	r3, #216	; 0xd8
 80008ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008be:	f7ff fe77 	bl	80005b0 <AD7175_WriteRegister>
 80008c2:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da01      	bge.n	80008ce <AD7175_Setup+0x1aa>
        return ret;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	e0fb      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_14]);
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <AD7175_Setup+0x294>)
 80008d0:	33e4      	adds	r3, #228	; 0xe4
 80008d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008d6:	f7ff fe6b 	bl	80005b0 <AD7175_WriteRegister>
 80008da:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da01      	bge.n	80008e6 <AD7175_Setup+0x1c2>
        return ret;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	e0ef      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_15]);
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <AD7175_Setup+0x294>)
 80008e8:	33f0      	adds	r3, #240	; 0xf0
 80008ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008ee:	f7ff fe5f 	bl	80005b0 <AD7175_WriteRegister>
 80008f2:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da01      	bge.n	80008fe <AD7175_Setup+0x1da>
        return ret;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	e0e3      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[CH_Map_16]);
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <AD7175_Setup+0x294>)
 8000900:	33fc      	adds	r3, #252	; 0xfc
 8000902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000906:	f7ff fe53 	bl	80005b0 <AD7175_WriteRegister>
 800090a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	da01      	bge.n	8000916 <AD7175_Setup+0x1f2>
        return ret;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	e0d7      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    /* Initialize Setup Configuration registers */
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_1]);
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <AD7175_Setup+0x294>)
 8000918:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800091c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000920:	f7ff fe46 	bl	80005b0 <AD7175_WriteRegister>
 8000924:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	da01      	bge.n	8000930 <AD7175_Setup+0x20c>
        return ret;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	e0ca      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_2]);
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <AD7175_Setup+0x294>)
 8000932:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800093a:	f7ff fe39 	bl	80005b0 <AD7175_WriteRegister>
 800093e:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	da01      	bge.n	800094a <AD7175_Setup+0x226>
        return ret;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	e0bd      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_3]);
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <AD7175_Setup+0x294>)
 800094c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000950:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000954:	f7ff fe2c 	bl	80005b0 <AD7175_WriteRegister>
 8000958:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	da01      	bge.n	8000964 <AD7175_Setup+0x240>
        return ret;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	e0b0      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_4]);
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <AD7175_Setup+0x294>)
 8000966:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800096a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800096e:	f7ff fe1f 	bl	80005b0 <AD7175_WriteRegister>
 8000972:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da01      	bge.n	800097e <AD7175_Setup+0x25a>
        return ret;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	e0a3      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_5]);
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <AD7175_Setup+0x294>)
 8000980:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000984:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000988:	f7ff fe12 	bl	80005b0 <AD7175_WriteRegister>
 800098c:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	da01      	bge.n	8000998 <AD7175_Setup+0x274>
        return ret;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	e096      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_6]);
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <AD7175_Setup+0x294>)
 800099a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800099e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009a2:	f7ff fe05 	bl	80005b0 <AD7175_WriteRegister>
 80009a6:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da08      	bge.n	80009c0 <AD7175_Setup+0x29c>
        return ret;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	e089      	b.n	8000ac6 <AD7175_Setup+0x3a2>
 80009b2:	bf00      	nop
 80009b4:	007a1200 	.word	0x007a1200
 80009b8:	20000000 	.word	0x20000000
 80009bc:	200002bc 	.word	0x200002bc
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_7]);
 80009c0:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <AD7175_Setup+0x3ac>)
 80009c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80009c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009ca:	f7ff fdf1 	bl	80005b0 <AD7175_WriteRegister>
 80009ce:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da01      	bge.n	80009da <AD7175_Setup+0x2b6>
        return ret;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	e075      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Setup_Config_8]);
 80009da:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <AD7175_Setup+0x3ac>)
 80009dc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80009e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009e4:	f7ff fde4 	bl	80005b0 <AD7175_WriteRegister>
 80009e8:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da01      	bge.n	80009f4 <AD7175_Setup+0x2d0>
        return ret;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	e068      	b.n	8000ac6 <AD7175_Setup+0x3a2>

    /* Initialize Filter Configuration registers */
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_1]);
 80009f4:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <AD7175_Setup+0x3ac>)
 80009f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80009fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009fe:	f7ff fdd7 	bl	80005b0 <AD7175_WriteRegister>
 8000a02:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da01      	bge.n	8000a0e <AD7175_Setup+0x2ea>
        return ret;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	e05b      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_2]);
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000a10:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8000a14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a18:	f7ff fdca 	bl	80005b0 <AD7175_WriteRegister>
 8000a1c:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	da01      	bge.n	8000a28 <AD7175_Setup+0x304>
        return ret;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	e04e      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_3]);
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000a2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a32:	f7ff fdbd 	bl	80005b0 <AD7175_WriteRegister>
 8000a36:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da01      	bge.n	8000a42 <AD7175_Setup+0x31e>
        return ret;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	e041      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_4]);
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000a44:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000a48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a4c:	f7ff fdb0 	bl	80005b0 <AD7175_WriteRegister>
 8000a50:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da01      	bge.n	8000a5c <AD7175_Setup+0x338>
        return ret;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	e034      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_5]);
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000a5e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a66:	f7ff fda3 	bl	80005b0 <AD7175_WriteRegister>
 8000a6a:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da01      	bge.n	8000a76 <AD7175_Setup+0x352>
        return ret;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	e027      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_6]);
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000a78:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000a7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a80:	f7ff fd96 	bl	80005b0 <AD7175_WriteRegister>
 8000a84:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da01      	bge.n	8000a90 <AD7175_Setup+0x36c>
        return ret;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	e01a      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_7]);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000a92:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a9a:	f7ff fd89 	bl	80005b0 <AD7175_WriteRegister>
 8000a9e:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da01      	bge.n	8000aaa <AD7175_Setup+0x386>
        return ret;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	e00d      	b.n	8000ac6 <AD7175_Setup+0x3a2>
    ret = AD7175_WriteRegister(AD7175_regs[Filter_Config_8]);
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <AD7175_Setup+0x3ac>)
 8000aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ab0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ab4:	f7ff fd7c 	bl	80005b0 <AD7175_WriteRegister>
 8000ab8:	6078      	str	r0, [r7, #4]
    if(ret < 0)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da01      	bge.n	8000ac4 <AD7175_Setup+0x3a0>
        return ret;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	e000      	b.n	8000ac6 <AD7175_Setup+0x3a2>

    return ret;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <SPI_Init>:
*******************************************************************************/
unsigned char SPI_Init(unsigned char lsbFirst,
                       unsigned long clockFreq,
                       unsigned char clockPol,
                       unsigned char clockEdg)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6039      	str	r1, [r7, #0]
 8000adc:	4611      	mov	r1, r2
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	71bb      	strb	r3, [r7, #6]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	717b      	strb	r3, [r7, #5]
   // Add your code here.
}
 8000aec:	bf00      	nop
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SPI_Write>:
 * @return Number of written bytes.
*******************************************************************************/
unsigned char SPI_Write(unsigned char slaveDeviceId,
                        unsigned char* data,
                        unsigned char bytesNumber)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET );
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2110      	movs	r1, #16
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fdd0 	bl	80016b8 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, data, &spiRxBuf, bytesNumber, 10000);
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <SPI_Write+0x48>)
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <SPI_Write+0x4c>)
 8000b28:	f002 f825 	bl	8002b76 <HAL_SPI_TransmitReceive>
	  //return sizeof(data);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET );
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2110      	movs	r1, #16
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fdc0 	bl	80016b8 <HAL_GPIO_WritePin>
}
 8000b38:	bf00      	nop
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200003ac 	.word	0x200003ac
 8000b48:	200002c0 	.word	0x200002c0

08000b4c <SPI_Read>:
 * @return Number of read bytes.
*******************************************************************************/
unsigned char SPI_Read(unsigned char slaveDeviceId,
                       unsigned char* data,
                       unsigned char bytesNumber)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET );
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fda8 	bl	80016b8 <HAL_GPIO_WritePin>
	    HAL_SPI_TransmitReceive(&hspi1, data, &spiRxBuf, bytesNumber, 10000);
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b70:	9200      	str	r2, [sp, #0]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <SPI_Read+0x48>)
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <SPI_Read+0x4c>)
 8000b78:	f001 fffd 	bl	8002b76 <HAL_SPI_TransmitReceive>
	    //return sizeof(data);
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET );
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 fd98 	bl	80016b8 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200003ac 	.word	0x200003ac
 8000b98:	200002c0 	.word	0x200002c0

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba0:	f000 faa1 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba4:	f000 f834 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba8:	f000 f902 	bl	8000db0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bac:	f000 f8d0 	bl	8000d50 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bb0:	f000 f890 	bl	8000cd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  AD7175_Setup();
 8000bb4:	f7ff fdb6 	bl	8000724 <AD7175_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read ADC conversion value from Channel 1
	  AD7175_ReadData(&AD7175_regs[CH_Map_1]);
 8000bb8:	4812      	ldr	r0, [pc, #72]	; (8000c04 <main+0x68>)
 8000bba:	f7ff fd67 	bl	800068c <AD7175_ReadData>
	  chan1 = spiRxBuf[1];
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <main+0x6c>)
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <main+0x70>)
 8000bc6:	601a      	str	r2, [r3, #0]
	  chan1 <<= 8;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <main+0x70>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <main+0x70>)
 8000bd0:	6013      	str	r3, [r2, #0]
	  chan1 |= spiRxBuf[2];
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <main+0x6c>)
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <main+0x70>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <main+0x70>)
 8000be0:	6013      	str	r3, [r2, #0]
	  chan1 <<= 8;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <main+0x70>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <main+0x70>)
 8000bea:	6013      	str	r3, [r2, #0]
	  chan1 |= spiRxBuf[3];
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <main+0x6c>)
 8000bee:	78db      	ldrb	r3, [r3, #3]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <main+0x70>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <main+0x70>)
 8000bfa:	6013      	str	r3, [r2, #0]

	  HAL_Delay(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fae7 	bl	80011d0 <HAL_Delay>
	  AD7175_ReadData(&AD7175_regs[CH_Map_1]);
 8000c02:	e7d9      	b.n	8000bb8 <main+0x1c>
 8000c04:	20000048 	.word	0x20000048
 8000c08:	200003ac 	.word	0x200003ac
 8000c0c:	200003b4 	.word	0x200003b4

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 ffbf 	bl	8003ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c36:	f000 fd75 	bl	8001724 <HAL_PWREx_ControlVoltageScaling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c40:	f000 f916 	bl	8000e70 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c44:	f000 fd50 	bl	80016e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <SystemClock_Config+0xc0>)
 8000c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <SystemClock_Config+0xc0>)
 8000c50:	f023 0318 	bic.w	r3, r3, #24
 8000c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c58:	2314      	movs	r3, #20
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c68:	2360      	movs	r3, #96	; 0x60
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c70:	2301      	movs	r3, #1
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c7c:	2307      	movs	r3, #7
 8000c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fd9f 	bl	80017d0 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f8ea 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 f99f 	bl	8001ff8 <HAL_RCC_ClockConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cc0:	f000 f8d6 	bl	8000e70 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cc4:	f001 fdb2 	bl	800282c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cc8:	bf00      	nop
 8000cca:	3758      	adds	r7, #88	; 0x58
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <MX_SPI1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000cee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d22:	2207      	movs	r2, #7
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_SPI1_Init+0x74>)
 8000d34:	f001 fe7c 	bl	8002a30 <HAL_SPI_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 f897 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200002c0 	.word	0x200002c0
 8000d4c:	40013000 	.word	0x40013000

08000d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <MX_USART2_UART_Init+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d94:	f002 fa76 	bl	8003284 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d9e:	f000 f867 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000324 	.word	0x20000324
 8000dac:	40004400 	.word	0x40004400

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_GPIO_Init+0xb8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2110      	movs	r1, #16
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f000 fc4f 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_GPIO_Init+0xbc>)
 8000e20:	f000 fc4a 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e24:	2310      	movs	r3, #16
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f000 fad1 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e42:	2308      	movs	r3, #8
 8000e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_GPIO_Init+0xbc>)
 8000e5a:	f000 fac3 	bl	80013e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000400 	.word	0x48000400

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_SPI_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d128      	bne.n	8000f38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_SPI_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23e0      	movs	r3, #224	; 0xe0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f000 fa56 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09e      	sub	sp, #120	; 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2254      	movs	r2, #84	; 0x54
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 fe1a 	bl	8003ba2 <memset>
  if(huart->Instance==USART2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_UART_MspInit+0xcc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d148      	bne.n	800100a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fa5b 	bl	8002440 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff ff6e 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_UART_MspInit+0xd0>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <HAL_UART_MspInit+0xd0>)
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_UART_MspInit+0xd0>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_UART_MspInit+0xd0>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_UART_MspInit+0xd0>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_UART_MspInit+0xd0>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe2:	f000 f9ff 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f000 f9ed 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3778      	adds	r7, #120	; 0x78
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40021000 	.word	0x40021000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f892 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff ffea 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <LoopForever+0xe>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	; (80010e0 <LoopForever+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f002 fd77 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c6:	f7ff fd69 	bl	8000b9c <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 80010d8:	08003c74 	.word	0x08003c74
  ldr r2, =_sbss
 80010dc:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80010e0:	200003bc 	.word	0x200003bc

080010e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_IRQHandler>

080010e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f943 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f80e 	bl	8001118 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff feb8 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_InitTick+0x6c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_InitTick+0x70>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_InitTick+0x6c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f941 	bl	80013ca <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10f      	bne.n	800116e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d809      	bhi.n	8001168 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f919 	bl	8001392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_InitTick+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e007      	b.n	8001178 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e004      	b.n	8001178 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e001      	b.n	8001178 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000029c 	.word	0x2000029c
 8001188:	20000294 	.word	0x20000294
 800118c:	20000298 	.word	0x20000298

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000029c 	.word	0x2000029c
 80011b4:	200003b8 	.word	0x200003b8

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200003b8 	.word	0x200003b8

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000029c 	.word	0x2000029c

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff47 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff5c 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffb0 	bl	8001338 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e148      	b.n	8001686 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 813a 	beq.w	8001680 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x40>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 0201 	and.w	r2, r3, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b03      	cmp	r3, #3
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d123      	bne.n	8001516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	6939      	ldr	r1, [r7, #16]
 8001512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0203 	and.w	r2, r3, #3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8094 	beq.w	8001680 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001558:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 800155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6613      	str	r3, [r2, #96]	; 0x60
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1d4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a43      	ldr	r2, [pc, #268]	; (80016ac <HAL_GPIO_Init+0x2c8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1d0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a42      	ldr	r2, [pc, #264]	; (80016b0 <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x1d6>
 80015b0:	2307      	movs	r3, #7
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x1d6>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x1d6>
 80015b8:	2300      	movs	r3, #0
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ca:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015fc:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800162c:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f aeaf 	bne.w	80013f4 <HAL_GPIO_Init+0x10>
  }
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_PWREx_GetVoltageRange+0x18>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000

08001724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001732:	d130      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001740:	d038      	beq.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800174a:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2232      	movs	r2, #50	; 0x32
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0c9b      	lsrs	r3, r3, #18
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001768:	e002      	b.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3b01      	subs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177c:	d102      	bne.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x60>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f2      	bne.n	800176a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001790:	d110      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e00f      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d007      	beq.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40007000 	.word	0x40007000
 80017c8:	20000294 	.word	0x20000294
 80017cc:	431bde83 	.word	0x431bde83

080017d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f000 bc02 	b.w	8001fe8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e4:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ee:	4b94      	ldr	r3, [pc, #592]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80e4 	beq.w	80019ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x4c>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	f040 808b 	bne.w	800192a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b01      	cmp	r3, #1
 8001818:	f040 8087 	bne.w	800192a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800181c:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_OscConfig+0x64>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e3d9      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_RCC_OscConfig+0x7e>
 8001844:	4b7e      	ldr	r3, [pc, #504]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800184c:	e005      	b.n	800185a <HAL_RCC_OscConfig+0x8a>
 800184e:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185a:	4293      	cmp	r3, r2
 800185c:	d223      	bcs.n	80018a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fd8c 	bl	8002380 <RCC_SetFlashLatencyFromMSIRange>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e3ba      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001872:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	496d      	ldr	r1, [pc, #436]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	4968      	ldr	r1, [pc, #416]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e025      	b.n	80018f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4960      	ldr	r1, [pc, #384]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c4:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	495b      	ldr	r1, [pc, #364]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fd4c 	bl	8002380 <RCC_SetFlashLatencyFromMSIRange>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e37a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f2:	f000 fc81 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4950      	ldr	r1, [pc, #320]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001910:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001912:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <HAL_RCC_OscConfig+0x27c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fbfe 	bl	8001118 <HAL_InitTick>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d052      	beq.n	80019cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	e35e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d032      	beq.n	8001998 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a42      	ldr	r2, [pc, #264]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800193e:	f7ff fc3b 	bl	80011b8 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001946:	f7ff fc37 	bl	80011b8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e347      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a35      	ldr	r2, [pc, #212]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4930      	ldr	r1, [pc, #192]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	492b      	ldr	r1, [pc, #172]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
 8001996:	e01a      	b.n	80019ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fc08 	bl	80011b8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ac:	f7ff fc04 	bl	80011b8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e314      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1dc>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d073      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x21c>
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d10e      	bne.n	8001a04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d10b      	bne.n	8001a04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d063      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2f0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d15f      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e2f1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d106      	bne.n	8001a1c <HAL_RCC_OscConfig+0x24c>
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e025      	b.n	8001a68 <HAL_RCC_OscConfig+0x298>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a24:	d114      	bne.n	8001a50 <HAL_RCC_OscConfig+0x280>
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a02      	ldr	r2, [pc, #8]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e013      	b.n	8001a68 <HAL_RCC_OscConfig+0x298>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08003c1c 	.word	0x08003c1c
 8001a48:	20000294 	.word	0x20000294
 8001a4c:	20000298 	.word	0x20000298
 8001a50:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a9f      	ldr	r2, [pc, #636]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a9c      	ldr	r2, [pc, #624]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fba2 	bl	80011b8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fb9e 	bl	80011b8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e2ae      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8a:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2a8>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fb8e 	bl	80011b8 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fb8a 	bl	80011b8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e29a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2d0>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d060      	beq.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x310>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d119      	bne.n	8001b0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d116      	bne.n	8001b0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae0:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_OscConfig+0x328>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e277      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	4973      	ldr	r1, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	e040      	b.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d023      	beq.n	8001b5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fb49 	bl	80011b8 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fb45 	bl	80011b8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e255      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	495f      	ldr	r1, [pc, #380]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e018      	b.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a5c      	ldr	r2, [pc, #368]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fb25 	bl	80011b8 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fb21 	bl	80011b8 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e231      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01c      	beq.n	8001bde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	4a4a      	ldr	r2, [pc, #296]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fb00 	bl	80011b8 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fafc 	bl	80011b8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e20c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ef      	beq.n	8001bbc <HAL_RCC_OscConfig+0x3ec>
 8001bdc:	e01b      	b.n	8001c16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be4:	4a3b      	ldr	r2, [pc, #236]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff fae3 	bl	80011b8 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fadf 	bl	80011b8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1ef      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a6 	beq.w	8001d70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_OscConfig+0x508>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d118      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_RCC_OscConfig+0x508>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x508>)
 8001c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c68:	f7ff faa6 	bl	80011b8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7ff faa2 	bl	80011b8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1b2      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x508>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4d8>
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca6:	e029      	b.n	8001cfc <HAL_RCC_OscConfig+0x52c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d115      	bne.n	8001cdc <HAL_RCC_OscConfig+0x50c>
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x52c>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a99      	ldr	r2, [pc, #612]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a95      	ldr	r2, [pc, #596]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d016      	beq.n	8001d32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fa58 	bl	80011b8 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fa54 	bl	80011b8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e162      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0ed      	beq.n	8001d0c <HAL_RCC_OscConfig+0x53c>
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff fa41 	bl	80011b8 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fa3d 	bl	80011b8 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e14b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d50:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ed      	bne.n	8001d3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b78      	ldr	r3, [pc, #480]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a77      	ldr	r2, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d03c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d84:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8a:	4a6f      	ldr	r2, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa10 	bl	80011b8 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9c:	f7ff fa0c 	bl	80011b8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e11c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dae:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ef      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5cc>
 8001dbc:	e01b      	b.n	8001df6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dbe:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc4:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f9f3 	bl	80011b8 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dd6:	f7ff f9ef 	bl	80011b8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0ff      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001de8:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ef      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80f3 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	f040 80c9 	bne.w	8001f9c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0203 	and.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d12c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d123      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d11b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d113      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d109      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	3b01      	subs	r3, #1
 8001e72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d06b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d062      	beq.n	8001f44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0ac      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e9a:	f7ff f98d 	bl	80011b8 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f989 	bl	80011b8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e099      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCC_OscConfig+0x77c>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eda:	0212      	lsls	r2, r2, #8
 8001edc:	4311      	orrs	r1, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ee2:	0852      	lsrs	r2, r2, #1
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	0552      	lsls	r2, r2, #21
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eee:	0852      	lsrs	r2, r2, #1
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0652      	lsls	r2, r2, #25
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001efa:	06d2      	lsls	r2, r2, #27
 8001efc:	430a      	orrs	r2, r1
 8001efe:	4912      	ldr	r1, [pc, #72]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f1c:	f7ff f94c 	bl	80011b8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f948 	bl	80011b8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e058      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_RCC_OscConfig+0x778>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f42:	e050      	b.n	8001fe6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e04f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d144      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f74:	f7ff f920 	bl	80011b8 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff f91c 	bl	80011b8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e02c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x7ac>
 8001f9a:	e024      	b.n	8001fe6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f903 	bl	80011b8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f8ff 	bl	80011b8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <HAL_RCC_OscConfig+0x820>)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_OscConfig+0x824>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
 8001fe0:	e001      	b.n	8001fe6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	feeefffc 	.word	0xfeeefffc

08001ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0e7      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d910      	bls.n	800203c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4970      	ldr	r1, [pc, #448]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cf      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	429a      	cmp	r2, r3
 8002056:	d908      	bls.n	800206a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4960      	ldr	r1, [pc, #384]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d04c      	beq.n	8002110 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d121      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0a6      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e09a      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e08e      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020be:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e086      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4943      	ldr	r1, [pc, #268]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e0:	f7ff f86a 	bl	80011b8 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff f866 	bl	80011b8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e06e      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002128:	429a      	cmp	r2, r3
 800212a:	d208      	bcs.n	800213e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	492b      	ldr	r1, [pc, #172]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d210      	bcs.n	800216e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 0207 	bic.w	r2, r3, #7
 8002154:	4923      	ldr	r1, [pc, #140]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e036      	b.n	80021dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4918      	ldr	r1, [pc, #96]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4910      	ldr	r1, [pc, #64]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ac:	f000 f824 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	490b      	ldr	r1, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1f4>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1fc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ffa1 	bl	8001118 <HAL_InitTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021da:	7afb      	ldrb	r3, [r7, #11]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08003c1c 	.word	0x08003c1c
 80021f0:	20000294 	.word	0x20000294
 80021f4:	20000298 	.word	0x20000298

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x34>
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d121      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d11e      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800222c:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e005      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002254:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d102      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_GetSysClockFreq+0x110>)
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	e004      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d101      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_RCC_GetSysClockFreq+0x114>)
 800227e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d134      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0xa6>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d003      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0xac>
 800229c:	e005      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_GetSysClockFreq+0x110>)
 80022a0:	617b      	str	r3, [r7, #20]
      break;
 80022a2:	e005      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x114>)
 80022a6:	617b      	str	r3, [r7, #20]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	617b      	str	r3, [r7, #20]
      break;
 80022ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	3301      	adds	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	fb03 f202 	mul.w	r2, r3, r2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	0e5b      	lsrs	r3, r3, #25
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	3301      	adds	r3, #1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f0:	69bb      	ldr	r3, [r7, #24]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	08003c34 	.word	0x08003c34
 8002308:	00f42400 	.word	0x00f42400
 800230c:	007a1200 	.word	0x007a1200

08002310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000294 	.word	0x20000294

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	08003c2c 	.word	0x08003c2c

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002358:	f7ff ffda 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0adb      	lsrs	r3, r3, #11
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_RCC_GetPCLK2Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08003c2c 	.word	0x08003c2c

08002380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002398:	f7ff f9b6 	bl	8001708 <HAL_PWREx_GetVoltageRange>
 800239c:	6178      	str	r0, [r7, #20]
 800239e:	e014      	b.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a24      	ldr	r2, [pc, #144]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023b8:	f7ff f9a6 	bl	8001708 <HAL_PWREx_GetVoltageRange>
 80023bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d10b      	bne.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d919      	bls.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2ba0      	cmp	r3, #160	; 0xa0
 80023dc:	d902      	bls.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023de:	2302      	movs	r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	e013      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e010      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d902      	bls.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023f0:	2303      	movs	r3, #3
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	e00a      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d102      	bne.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fc:	2302      	movs	r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e004      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b70      	cmp	r3, #112	; 0x70
 8002406:	d101      	bne.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002408:	2301      	movs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 0207 	bic.w	r2, r3, #7
 8002414:	4909      	ldr	r1, [pc, #36]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	40022000 	.word	0x40022000

08002440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002448:	2300      	movs	r3, #0
 800244a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800244c:	2300      	movs	r3, #0
 800244e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002458:	2b00      	cmp	r3, #0
 800245a:	d031      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002464:	d01a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002466:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800246a:	d814      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002474:	d10f      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a5c      	ldr	r2, [pc, #368]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002482:	e00c      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3304      	adds	r3, #4
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f9de 	bl	800284c <RCCEx_PLLSAI1_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	74fb      	strb	r3, [r7, #19]
      break;
 800249a:	e000      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a4:	4b51      	ldr	r3, [pc, #324]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	494e      	ldr	r1, [pc, #312]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ba:	e001      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 809e 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002500:	2301      	movs	r3, #1
 8002502:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a39      	ldr	r2, [pc, #228]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002510:	f7fe fe52 	bl	80011b8 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fe4e 	bl	80011b8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	74fb      	strb	r3, [r7, #19]
        break;
 800252a:	e005      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d15a      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253e:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002548:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01e      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d019      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fe0e 	bl	80011b8 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	e00b      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fe fe0a 	bl	80011b8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
            break;
 80025b6:	e006      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ec      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025e2:	e009      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f8:	7c7b      	ldrb	r3, [r7, #17]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a89      	ldr	r2, [pc, #548]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002616:	4b84      	ldr	r3, [pc, #528]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f023 0203 	bic.w	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4980      	ldr	r1, [pc, #512]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002638:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 020c 	bic.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	4978      	ldr	r1, [pc, #480]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800265a:	4b73      	ldr	r3, [pc, #460]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	496f      	ldr	r1, [pc, #444]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	4967      	ldr	r1, [pc, #412]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800269e:	4b62      	ldr	r3, [pc, #392]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	495e      	ldr	r1, [pc, #376]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4956      	ldr	r1, [pc, #344]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	494d      	ldr	r1, [pc, #308]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d028      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002704:	4b48      	ldr	r3, [pc, #288]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4945      	ldr	r1, [pc, #276]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002722:	d106      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	4b40      	ldr	r3, [pc, #256]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272e:	60d3      	str	r3, [r2, #12]
 8002730:	e011      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273a:	d10c      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f882 	bl	800284c <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	492d      	ldr	r1, [pc, #180]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002780:	d106      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002782:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278c:	60d3      	str	r3, [r2, #12]
 800278e:	e011      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f853 	bl	800284c <RCCEx_PLLSAI1_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01c      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	4916      	ldr	r1, [pc, #88]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027de:	d10c      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f830 	bl	800284c <RCCEx_PLLSAI1_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4904      	ldr	r1, [pc, #16]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800281c:	7cbb      	ldrb	r3, [r7, #18]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285a:	4b74      	ldr	r3, [pc, #464]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002866:	4b71      	ldr	r3, [pc, #452]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d10d      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
       ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
       ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d047      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e044      	b.n	8002922 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d018      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x86>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d825      	bhi.n	80028f0 <RCCEx_PLLSAI1_Config+0xa4>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0x62>
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d009      	beq.n	80028c0 <RCCEx_PLLSAI1_Config+0x74>
 80028ac:	e020      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ae:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11d      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028be:	e01a      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e013      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028de:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ee:	e006      	b.n	80028fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e004      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	430b      	orrs	r3, r1
 800291c:	4943      	ldr	r1, [pc, #268]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800291e:	4313      	orrs	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d17c      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002928:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3f      	ldr	r2, [pc, #252]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800292e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe fc40 	bl	80011b8 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293a:	e009      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800293c:	f7fe fc3c 	bl	80011b8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
        break;
 800294e:	e005      	b.n	800295c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ef      	bne.n	800293c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d15f      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d110      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002970:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6892      	ldr	r2, [r2, #8]
 8002978:	0211      	lsls	r1, r2, #8
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	06d2      	lsls	r2, r2, #27
 8002980:	430a      	orrs	r2, r1
 8002982:	492a      	ldr	r1, [pc, #168]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	610b      	str	r3, [r1, #16]
 8002988:	e027      	b.n	80029da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d112      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	0211      	lsls	r1, r2, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6912      	ldr	r2, [r2, #16]
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0552      	lsls	r2, r2, #21
 80029ac:	430a      	orrs	r2, r1
 80029ae:	491f      	ldr	r1, [pc, #124]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	610b      	str	r3, [r1, #16]
 80029b4:	e011      	b.n	80029da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6892      	ldr	r2, [r2, #8]
 80029c6:	0211      	lsls	r1, r2, #8
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6952      	ldr	r2, [r2, #20]
 80029cc:	0852      	lsrs	r2, r2, #1
 80029ce:	3a01      	subs	r2, #1
 80029d0:	0652      	lsls	r2, r2, #25
 80029d2:	430a      	orrs	r2, r1
 80029d4:	4915      	ldr	r1, [pc, #84]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fbe7 	bl	80011b8 <HAL_GetTick>
 80029ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ec:	e009      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029ee:	f7fe fbe3 	bl	80011b8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d902      	bls.n	8002a02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	73fb      	strb	r3, [r7, #15]
          break;
 8002a00:	e005      	b.n	8002a0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ef      	beq.n	80029ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e095      	b.n	8002b6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a52:	d009      	beq.n	8002a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
 8002a5a:	e005      	b.n	8002a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe fa1e 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa8:	d902      	bls.n	8002ab0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e002      	b.n	8002ab6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002abe:	d007      	beq.n	8002ad0 <HAL_SPI_Init+0xa0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	ea42 0103 	orr.w	r1, r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	f003 0204 	and.w	r2, r3, #4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b4c:	ea42 0103 	orr.w	r1, r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b84:	2301      	movs	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_SPI_TransmitReceive+0x26>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e20a      	b.n	8002fb2 <HAL_SPI_TransmitReceive+0x43c>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ba4:	f7fe fb08 	bl	80011b8 <HAL_GetTick>
 8002ba8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bc0:	7efb      	ldrb	r3, [r7, #27]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d00e      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x6e>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bcc:	d106      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x66>
 8002bd6:	7efb      	ldrb	r3, [r7, #27]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d003      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002be2:	e1e0      	b.n	8002fa6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x80>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x80>
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bfc:	e1d3      	b.n	8002fa6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	887a      	ldrh	r2, [r7, #2]
 8002c3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c54:	d802      	bhi.n	8002c5c <HAL_SPI_TransmitReceive+0xe6>
 8002c56:	8a3b      	ldrh	r3, [r7, #16]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d908      	bls.n	8002c6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	e007      	b.n	8002c7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d007      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca4:	f240 8081 	bls.w	8002daa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_SPI_TransmitReceive+0x140>
 8002cb0:	8a7b      	ldrh	r3, [r7, #18]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d16d      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cda:	e05a      	b.n	8002d92 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d11b      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x1ac>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0x1ac>
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d113      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d11c      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x1f4>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d016      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	b292      	uxth	r2, r2
 8002d48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	1c9a      	adds	r2, r3, #2
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d66:	2301      	movs	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d6a:	f7fe fa25 	bl	80011b8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d80b      	bhi.n	8002d92 <HAL_SPI_TransmitReceive+0x21c>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d007      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002d90:	e109      	b.n	8002fa6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d19f      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x166>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d199      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x166>
 8002da8:	e0e3      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x244>
 8002db2:	8a7b      	ldrh	r3, [r7, #18]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 80cf 	bne.w	8002f58 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d912      	bls.n	8002dea <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b02      	subs	r3, #2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002de8:	e0b6      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e10:	e0a2      	b.n	8002f58 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d134      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x314>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02f      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x314>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d12c      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d912      	bls.n	8002e60 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b02      	subs	r3, #2
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e5e:	e012      	b.n	8002e86 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d148      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x3b4>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d042      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d923      	bls.n	8002ef8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b02      	subs	r3, #2
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d81f      	bhi.n	8002f26 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	e016      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f103 020c 	add.w	r2, r3, #12
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f2a:	f7fe f945 	bl	80011b8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d803      	bhi.n	8002f42 <HAL_SPI_TransmitReceive+0x3cc>
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x3d2>
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002f56:	e026      	b.n	8002fa6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f47f af57 	bne.w	8002e12 <HAL_SPI_TransmitReceive+0x29c>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f47f af50 	bne.w	8002e12 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f93e 	bl	80031f8 <SPI_EndRxTxTransaction>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9c:	e003      	b.n	8002fa6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fcc:	f7fe f8f4 	bl	80011b8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fdc:	f7fe f8ec 	bl	80011b8 <HAL_GetTick>
 8002fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	0d1b      	lsrs	r3, r3, #20
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ff2:	e054      	b.n	800309e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d050      	beq.n	800309e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ffc:	f7fe f8dc 	bl	80011b8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	d902      	bls.n	8003012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d13d      	bne.n	800308e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302a:	d111      	bne.n	8003050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003034:	d004      	beq.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d107      	bne.n	8003050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003058:	d10f      	bne.n	800307a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e017      	b.n	80030be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3b01      	subs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d19b      	bne.n	8002ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000294 	.word	0x20000294

080030cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030de:	f7fe f86b 	bl	80011b8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030ee:	f7fe f863 	bl	80011b8 <HAL_GetTick>
 80030f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00da      	lsls	r2, r3, #3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	0d1b      	lsrs	r3, r3, #20
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003114:	e060      	b.n	80031d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800311c:	d107      	bne.n	800312e <SPI_WaitFifoStateUntilTimeout+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800312c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d050      	beq.n	80031d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003136:	f7fe f83f 	bl	80011b8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	429a      	cmp	r2, r3
 8003144:	d902      	bls.n	800314c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d13d      	bne.n	80031c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800315a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003164:	d111      	bne.n	800318a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316e:	d004      	beq.n	800317a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d107      	bne.n	800318a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003188:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	d10f      	bne.n	80031b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e010      	b.n	80031ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d196      	bne.n	8003116 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000294 	.word	0x20000294

080031f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff ff5b 	bl	80030cc <SPI_WaitFifoStateUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e027      	b.n	800327c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fec0 	bl	8002fbc <SPI_WaitFlagStateUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e014      	b.n	800327c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff34 	bl	80030cc <SPI_WaitFifoStateUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e000      	b.n	800327c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e040      	b.n	8003318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fe4e 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa54 	bl	8003778 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f825 	bl	8003320 <UART_SetConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e01b      	b.n	8003318 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fad3 	bl	80038bc <UART_CheckIdleState>
 8003316:	4603      	mov	r3, r0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b08a      	sub	sp, #40	; 0x28
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4bb4      	ldr	r3, [pc, #720]	; (8003620 <UART_SetConfig+0x300>)
 8003350:	4013      	ands	r3, r2
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003358:	430b      	orrs	r3, r1
 800335a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4aa9      	ldr	r2, [pc, #676]	; (8003624 <UART_SetConfig+0x304>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	4313      	orrs	r3, r2
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4aa0      	ldr	r2, [pc, #640]	; (8003628 <UART_SetConfig+0x308>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d126      	bne.n	80033f8 <UART_SetConfig+0xd8>
 80033aa:	4ba0      	ldr	r3, [pc, #640]	; (800362c <UART_SetConfig+0x30c>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d81b      	bhi.n	80033f0 <UART_SetConfig+0xd0>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0xa0>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e1 	.word	0x080033e1
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033e9 	.word	0x080033e9
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e080      	b.n	80034da <UART_SetConfig+0x1ba>
 80033d8:	2302      	movs	r3, #2
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e07c      	b.n	80034da <UART_SetConfig+0x1ba>
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e078      	b.n	80034da <UART_SetConfig+0x1ba>
 80033e8:	2308      	movs	r3, #8
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e074      	b.n	80034da <UART_SetConfig+0x1ba>
 80033f0:	2310      	movs	r3, #16
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	e070      	b.n	80034da <UART_SetConfig+0x1ba>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a8c      	ldr	r2, [pc, #560]	; (8003630 <UART_SetConfig+0x310>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d138      	bne.n	8003474 <UART_SetConfig+0x154>
 8003402:	4b8a      	ldr	r3, [pc, #552]	; (800362c <UART_SetConfig+0x30c>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d82d      	bhi.n	800346c <UART_SetConfig+0x14c>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <UART_SetConfig+0xf8>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	0800344d 	.word	0x0800344d
 800341c:	0800346d 	.word	0x0800346d
 8003420:	0800346d 	.word	0x0800346d
 8003424:	0800346d 	.word	0x0800346d
 8003428:	0800345d 	.word	0x0800345d
 800342c:	0800346d 	.word	0x0800346d
 8003430:	0800346d 	.word	0x0800346d
 8003434:	0800346d 	.word	0x0800346d
 8003438:	08003455 	.word	0x08003455
 800343c:	0800346d 	.word	0x0800346d
 8003440:	0800346d 	.word	0x0800346d
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003465 	.word	0x08003465
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e042      	b.n	80034da <UART_SetConfig+0x1ba>
 8003454:	2302      	movs	r3, #2
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e03e      	b.n	80034da <UART_SetConfig+0x1ba>
 800345c:	2304      	movs	r3, #4
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e03a      	b.n	80034da <UART_SetConfig+0x1ba>
 8003464:	2308      	movs	r3, #8
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e036      	b.n	80034da <UART_SetConfig+0x1ba>
 800346c:	2310      	movs	r3, #16
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e032      	b.n	80034da <UART_SetConfig+0x1ba>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6a      	ldr	r2, [pc, #424]	; (8003624 <UART_SetConfig+0x304>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12a      	bne.n	80034d4 <UART_SetConfig+0x1b4>
 800347e:	4b6b      	ldr	r3, [pc, #428]	; (800362c <UART_SetConfig+0x30c>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800348c:	d01a      	beq.n	80034c4 <UART_SetConfig+0x1a4>
 800348e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003492:	d81b      	bhi.n	80034cc <UART_SetConfig+0x1ac>
 8003494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003498:	d00c      	beq.n	80034b4 <UART_SetConfig+0x194>
 800349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349e:	d815      	bhi.n	80034cc <UART_SetConfig+0x1ac>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <UART_SetConfig+0x18c>
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d008      	beq.n	80034bc <UART_SetConfig+0x19c>
 80034aa:	e00f      	b.n	80034cc <UART_SetConfig+0x1ac>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e012      	b.n	80034da <UART_SetConfig+0x1ba>
 80034b4:	2302      	movs	r3, #2
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e00e      	b.n	80034da <UART_SetConfig+0x1ba>
 80034bc:	2304      	movs	r3, #4
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e00a      	b.n	80034da <UART_SetConfig+0x1ba>
 80034c4:	2308      	movs	r3, #8
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e006      	b.n	80034da <UART_SetConfig+0x1ba>
 80034cc:	2310      	movs	r3, #16
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e002      	b.n	80034da <UART_SetConfig+0x1ba>
 80034d4:	2310      	movs	r3, #16
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a51      	ldr	r2, [pc, #324]	; (8003624 <UART_SetConfig+0x304>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d17a      	bne.n	80035da <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d824      	bhi.n	8003536 <UART_SetConfig+0x216>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <UART_SetConfig+0x1d4>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003537 	.word	0x08003537
 8003504:	08003527 	.word	0x08003527
 8003508:	08003537 	.word	0x08003537
 800350c:	08003537 	.word	0x08003537
 8003510:	08003537 	.word	0x08003537
 8003514:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003518:	f7fe ff06 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 800351c:	61f8      	str	r0, [r7, #28]
        break;
 800351e:	e010      	b.n	8003542 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b44      	ldr	r3, [pc, #272]	; (8003634 <UART_SetConfig+0x314>)
 8003522:	61fb      	str	r3, [r7, #28]
        break;
 8003524:	e00d      	b.n	8003542 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe fe67 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800352a:	61f8      	str	r0, [r7, #28]
        break;
 800352c:	e009      	b.n	8003542 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	61fb      	str	r3, [r7, #28]
        break;
 8003534:	e005      	b.n	8003542 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8107 	beq.w	8003758 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	429a      	cmp	r2, r3
 8003558:	d305      	bcc.n	8003566 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	429a      	cmp	r2, r3
 8003564:	d903      	bls.n	800356e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800356c:	e0f4      	b.n	8003758 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2200      	movs	r2, #0
 8003572:	461c      	mov	r4, r3
 8003574:	4615      	mov	r5, r2
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	022b      	lsls	r3, r5, #8
 8003580:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003584:	0222      	lsls	r2, r4, #8
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	6849      	ldr	r1, [r1, #4]
 800358a:	0849      	lsrs	r1, r1, #1
 800358c:	2000      	movs	r0, #0
 800358e:	4688      	mov	r8, r1
 8003590:	4681      	mov	r9, r0
 8003592:	eb12 0a08 	adds.w	sl, r2, r8
 8003596:	eb43 0b09 	adc.w	fp, r3, r9
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035a8:	4650      	mov	r0, sl
 80035aa:	4659      	mov	r1, fp
 80035ac:	f7fc fe0e 	bl	80001cc <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035be:	d308      	bcc.n	80035d2 <UART_SetConfig+0x2b2>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c6:	d204      	bcs.n	80035d2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	e0c2      	b.n	8003758 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035d8:	e0be      	b.n	8003758 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d16a      	bne.n	80036ba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80035e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d834      	bhi.n	8003656 <UART_SetConfig+0x336>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <UART_SetConfig+0x2d4>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003619 	.word	0x08003619
 80035f8:	08003639 	.word	0x08003639
 80035fc:	08003641 	.word	0x08003641
 8003600:	08003657 	.word	0x08003657
 8003604:	08003647 	.word	0x08003647
 8003608:	08003657 	.word	0x08003657
 800360c:	08003657 	.word	0x08003657
 8003610:	08003657 	.word	0x08003657
 8003614:	0800364f 	.word	0x0800364f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003618:	f7fe fe86 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 800361c:	61f8      	str	r0, [r7, #28]
        break;
 800361e:	e020      	b.n	8003662 <UART_SetConfig+0x342>
 8003620:	efff69f3 	.word	0xefff69f3
 8003624:	40008000 	.word	0x40008000
 8003628:	40013800 	.word	0x40013800
 800362c:	40021000 	.word	0x40021000
 8003630:	40004400 	.word	0x40004400
 8003634:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003638:	f7fe fe8c 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 800363c:	61f8      	str	r0, [r7, #28]
        break;
 800363e:	e010      	b.n	8003662 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <UART_SetConfig+0x454>)
 8003642:	61fb      	str	r3, [r7, #28]
        break;
 8003644:	e00d      	b.n	8003662 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7fe fdd7 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800364a:	61f8      	str	r0, [r7, #28]
        break;
 800364c:	e009      	b.n	8003662 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003652:	61fb      	str	r3, [r7, #28]
        break;
 8003654:	e005      	b.n	8003662 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d077      	beq.n	8003758 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005a      	lsls	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d916      	bls.n	80036b2 <UART_SetConfig+0x392>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d212      	bcs.n	80036b2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f023 030f 	bic.w	r3, r3, #15
 8003694:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	8afa      	ldrh	r2, [r7, #22]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	e052      	b.n	8003758 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036b8:	e04e      	b.n	8003758 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d827      	bhi.n	8003712 <UART_SetConfig+0x3f2>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0x3a8>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003713 	.word	0x08003713
 80036d8:	08003703 	.word	0x08003703
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003713 	.word	0x08003713
 80036e4:	08003713 	.word	0x08003713
 80036e8:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7fe fe1c 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e014      	b.n	800371e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe fe2e 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e010      	b.n	800371e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <UART_SetConfig+0x454>)
 80036fe:	61fb      	str	r3, [r7, #28]
        break;
 8003700:	e00d      	b.n	800371e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fd79 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8003706:	61f8      	str	r0, [r7, #28]
        break;
 8003708:	e009      	b.n	800371e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	61fb      	str	r3, [r7, #28]
        break;
 8003710:	e005      	b.n	800371e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800371c:	bf00      	nop
    }

    if (pclk != 0U)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d019      	beq.n	8003758 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085a      	lsrs	r2, r3, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	441a      	add	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d909      	bls.n	8003752 <UART_SetConfig+0x432>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d205      	bcs.n	8003752 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	e002      	b.n	8003758 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003764:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	00f42400 	.word	0x00f42400

08003778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01a      	beq.n	800388e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003876:	d10a      	bne.n	800388e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b098      	sub	sp, #96	; 0x60
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038cc:	f7fd fc74 	bl	80011b8 <HAL_GetTick>
 80038d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d12e      	bne.n	800393e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f88c 	bl	8003a0c <UART_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d021      	beq.n	800393e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390e:	653b      	str	r3, [r7, #80]	; 0x50
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800391e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e6      	bne.n	80038fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e062      	b.n	8003a04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d149      	bne.n	80039e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003954:	2200      	movs	r2, #0
 8003956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f856 	bl	8003a0c <UART_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d03c      	beq.n	80039e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	623b      	str	r3, [r7, #32]
   return(result);
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
 8003986:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800398a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e6      	bne.n	8003966 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	61fa      	str	r2, [r7, #28]
 80039ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	617b      	str	r3, [r7, #20]
   return(result);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e5      	bne.n	8003998 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e011      	b.n	8003a04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3758      	adds	r7, #88	; 0x58
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1c:	e049      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d045      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fd fbc7 	bl	80011b8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e048      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d031      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d110      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2208      	movs	r2, #8
 8003a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f838 	bl	8003ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e029      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d111      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f81e 	bl	8003ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e00f      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d0a6      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b095      	sub	sp, #84	; 0x54
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	643b      	str	r3, [r7, #64]	; 0x40
 8003b02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d118      	bne.n	8003b82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e6      	bne.n	8003b50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b96:	bf00      	nop
 8003b98:	3754      	adds	r7, #84	; 0x54
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <memset>:
 8003ba2:	4402      	add	r2, r0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d100      	bne.n	8003bac <memset+0xa>
 8003baa:	4770      	bx	lr
 8003bac:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb0:	e7f9      	b.n	8003ba6 <memset+0x4>
	...

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4d0d      	ldr	r5, [pc, #52]	; (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	; (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1b64      	subs	r4, r4, r5
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	42a6      	cmp	r6, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4d0b      	ldr	r5, [pc, #44]	; (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	; (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 f818 	bl	8003bfc <_init>
 8003bcc:	1b64      	subs	r4, r4, r5
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	42a6      	cmp	r6, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bdc:	4798      	blx	r3
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be6:	4798      	blx	r3
 8003be8:	3601      	adds	r6, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003c6c 	.word	0x08003c6c
 8003bf0:	08003c6c 	.word	0x08003c6c
 8003bf4:	08003c6c 	.word	0x08003c6c
 8003bf8:	08003c70 	.word	0x08003c70

08003bfc <_init>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr

08003c08 <_fini>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	bf00      	nop
 8003c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0e:	bc08      	pop	{r3}
 8003c10:	469e      	mov	lr, r3
 8003c12:	4770      	bx	lr
